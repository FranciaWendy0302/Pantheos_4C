name: Build & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - linux
        - windows
        - macos

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'linux' || github.event.inputs.platform == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Godot
      uses: godotengine/godot-ci-action@v1.0.0
      with:
        godot-version: '4.4'
        platform: 'linux'
        
    - name: Create export presets
      run: |
        mkdir -p .godot/export_presets.cfg
        cat > .godot/export_presets.cfg << 'EOF'
        [preset.0]
        name="Linux/X11"
        platform="Linux/X11"
        runnable=true
        export_path="build/linux/aarpg.x86_64"
        [preset.1]
        name="Linux/X11 (Debug)"
        platform="Linux/X11"
        runnable=true
        export_path="build/linux/aarpg_debug.x86_64"
        debug=true
        EOF
        
    - name: Export Linux Debug
      run: |
        mkdir -p build/linux
        godot --headless --export-debug "Linux/X11" build/linux/aarpg_debug.x86_64
        
    - name: Export Linux Release
      run: |
        godot --headless --export-release "Linux/X11" build/linux/aarpg.x86_64
        
    - name: Create Linux Archive
      run: |
        cd build/linux
        tar -czf aarpg-linux.tar.gz *
        
    - name: Upload Linux Build
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: build/linux/

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows' || github.event.inputs.platform == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Godot
      uses: godotengine/godot-ci-action@v1.0.0
      with:
        godot-version: '4.4'
        platform: 'windows'
        
    - name: Create export presets
      run: |
        mkdir -p .godot/export_presets.cfg
        @"
        [preset.0]
        name="Windows Desktop"
        platform="Windows Desktop"
        runnable=true
        export_path="build/windows/aarpg.exe"
        [preset.1]
        name="Windows Desktop (Debug)"
        platform="Windows Desktop"
        runnable=true
        export_path="build/windows/aarpg_debug.exe"
        debug=true
        "@ | Out-File -FilePath .godot/export_presets.cfg -Encoding utf8
        
    - name: Export Windows Debug
      run: |
        mkdir -p build/windows
        godot --headless --export-debug "Windows Desktop" build/windows/aarpg_debug.exe
        
    - name: Export Windows Release
      run: |
        godot --headless --export-release "Windows Desktop" build/windows/aarpg.exe
        
    - name: Create Windows Archive
      run: |
        cd build/windows
        Compress-Archive -Path * -DestinationPath aarpg-windows.zip
        
    - name: Upload Windows Build
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: build/windows/

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos' || github.event.inputs.platform == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Godot
      uses: godotengine/godot-ci-action@v1.0.0
      with:
        godot-version: '4.4'
        platform: 'macos'
        
    - name: Create export presets
      run: |
        mkdir -p .godot/export_presets.cfg
        cat > .godot/export_presets.cfg << 'EOF'
        [preset.0]
        name="macOS"
        platform="macOS"
        runnable=true
        export_path="build/macos/aarpg.app"
        [preset.1]
        name="macOS (Debug)"
        platform="macOS"
        runnable=true
        export_path="build/macos/aarpg_debug.app"
        debug=true
        EOF
        
    - name: Export macOS Debug
      run: |
        mkdir -p build/macos
        godot --headless --export-debug "macOS" build/macos/aarpg_debug.app
        
    - name: Export macOS Release
      run: |
        godot --headless --export-release "macOS" build/macos/aarpg.app
        
    - name: Create macOS Archive
      run: |
        cd build/macos
        zip -r aarpg-macos.zip *
        
    - name: Upload macOS Build
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: build/macos/

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download Linux Build
      uses: actions/download-artifact@v4
      with:
        name: linux-build
        path: linux-build/
        
    - name: Download Windows Build
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: windows-build/
        
    - name: Download macOS Build
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: macos-build/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Pantheos 4C - ${{ github.ref_name }}
          
          ### Downloads
          - **Linux**: `aarpg-linux.tar.gz`
          - **Windows**: `aarpg-windows.zip`
          - **macOS**: `aarpg-macos.zip`
          
          ### Changes
          See commit history for detailed changes.
          
          ### Installation
          1. Download the appropriate file for your platform
          2. Extract the archive
          3. Run the executable
        files: |
          linux-build/*
          windows-build/*
          macos-build/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
