name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, gek ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Godot
      run: |
        # Try multiple download methods for reliability
        try {
          Invoke-WebRequest -Uri "https://github.com/godotengine/godot/releases/download/4.4-stable/Godot_v4.4-stable_win64.exe.zip" -OutFile "godot.zip" -TimeoutSec 30
        } catch {
          Write-Host "GitHub download failed, trying alternative..."
          Invoke-WebRequest -Uri "https://downloads.tuxfamily.org/godotengine/4.4/Godot_v4.4-stable_win64.exe.zip" -OutFile "godot.zip" -TimeoutSec 60
        }
        Expand-Archive -Path "godot.zip" -DestinationPath "godot"
        $env:PATH += ";$PWD/godot"
        echo "$PWD/godot" >> $env:GITHUB_PATH
        
    - name: Run Unit Tests
      run: |
        godot --headless --script "Unit Testing/run_tests.gd" --quit
      env:
        GODOT_HEADLESS: 1
        
    - name: Run GdUnit4 Tests
      run: |
        godot --headless --script "res://addons/gdUnit4/bin/GdUnitRunner.gd" --quit
      env:
        GODOT_HEADLESS: 1

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Godot
      run: |
        # Try multiple download methods for reliability
        try {
          Invoke-WebRequest -Uri "https://github.com/godotengine/godot/releases/download/4.4-stable/Godot_v4.4-stable_win64.exe.zip" -OutFile "godot.zip" -TimeoutSec 30
        } catch {
          Write-Host "GitHub download failed, trying alternative..."
          Invoke-WebRequest -Uri "https://downloads.tuxfamily.org/godotengine/4.4/Godot_v4.4-stable_win64.exe.zip" -OutFile "godot.zip" -TimeoutSec 60
        }
        Expand-Archive -Path "godot.zip" -DestinationPath "godot"
        $env:PATH += ";$PWD/godot"
        echo "$PWD/godot" >> $env:GITHUB_PATH
        
    - name: Create export presets
      run: |
        mkdir -p .godot/export_presets.cfg
        @"
        [preset.0]
        name="Windows Desktop"
        platform="Windows Desktop"
        runnable=true
        export_path="build/windows/aarpg.exe"
        [preset.1]
        name="Windows Desktop (Debug)"
        platform="Windows Desktop"
        runnable=true
        export_path="build/windows/aarpg_debug.exe"
        debug=true
        "@ | Out-File -FilePath .godot/export_presets.cfg -Encoding utf8
        
    - name: Export Windows Debug
      run: |
        mkdir -p build/windows
        godot --headless --export-debug "Windows Desktop" build/windows/aarpg_debug.exe
        
    - name: Export Windows Release
      run: |
        godot --headless --export-release "Windows Desktop" build/windows/aarpg.exe
        
    - name: Create Windows Archive
      run: |
        cd build/windows
        Compress-Archive -Path * -DestinationPath aarpg-windows.zip
        
    - name: Upload Windows Build
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: build/windows/

  release:
    name: Create Release
    runs-on: windows-latest
    needs: [test, build-windows]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download Windows Build
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: windows-build/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## Pantheos 4C - ${{ github.ref_name }}
          
          ### Downloads
          - **Windows**: `aarpg-windows.zip`
          
          ### Installation
          1. Download the Windows build
          2. Extract the archive
          3. Run aarpg.exe
        files: |
          windows-build/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        ###run